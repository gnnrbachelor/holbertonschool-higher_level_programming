The ``0-add_integer`` module
============================

Using ``add_integer``
--------------------

Importing Function
	>>> add_integer = __import__('0-add_integer').add_integer

Check mod docstring:
	>>> mod = __import__("0-add_integer").__doc__
	>>> len(mod) > 1
	True

Check func docstring:
	>>> doc = add_integer.__doc__
	>>> len(doc) > 1
	True

Check basic addition
	>>> add_integer(1, 2)
	3

Check with non-integer
	>>> add_integer("Test", 1)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(1, "Test")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Test with Float
	>>> add_integer(2.5, 2)
	4

Checking with dict
	>>> add_integer({ "writer" : "Vonnegut" }, 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(3, { "writer" : "Vonnegut" })
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Checking with list element
	>>> add_integer([4], 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(3, [4])
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Checking with Float overflow
	>>> add_integer(3, float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Checking with Float NAN
	>>> add_integer(3, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Check with no arguments
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Check with one argument
	>>> add_integer(3)
	101
